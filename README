-EemsController.create
	receive params from form
	create Eem
		(could be refactored out to PartCreation module, then included in Eems and Parts controllers)
		create Part
			-set :done to false
		create ContentFile
		create DownloadJob
	redirect to EemsController.show

Part
	properties
		:url
		:done
		:content_file_id
		:size?
	
	content Datastream -no fedora checksum?
		-points to workspace/eems-druid/content.pdf (we can create this even if the job isn't done)

	
-EemsController.show
	-render Eem detail page
	-check done flag of any part
	-If part not done
		-progress box queries ContentFile controller /contentfiles/:id/status
	
	-if 100 but not done
		-calls PartsController.update_attributes(part_druid, :done, 'true')
		-re-render part/page with part details
	-if error
		-display error....
		-do we retry?
			-display button to retry - calls /contentfiles/:id/retry
	
-ContentFileController/:id => #show
	-calls ContentFile.percent_done
	-returns json

#Need to grab druids from Suri

HOLD
If request from bookmark tool
-render small progress box
	-page has javascript to query ContentFile controller for status
	-keeps querying for status until 100 or error


#HOLD Needed for addtional files when Eems is already created
PartsController.create
	-creates child object
	-sets :done to false