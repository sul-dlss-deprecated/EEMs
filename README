-EemsController.create
	receive params from form
	create Eem
		(could be refactored out to PartCreation module, then included in Eems and Parts controllers)
		create ContentFile
			set url and filepath
			create_table "content_files", :force => true do |t|
		    t.string   "url"
		    t.integer  "percent_done"
		    t.string   "path"
		    t.datetime "created_at"
		    t.datetime "updated_at"
		    t.string   "filepath"
		    t.string   "part_pid"
		  end
		create Part
		-add relationship to parent Eem
		m.field "url", :string
	    m.field "done", :string
	    m.field "content_file_id", :string

		create DownloadJob
		returns json
		{
			eems_pid => 'druid:123'
			part_pid => 'druid:345
			content_file_id => 23
		}

Part
	properties
		:url
		:done
		:content_file_id
		:size?
	
	-:done initialized to false
	
	content Datastream -no fedora checksum?
		-points to workspace/eems-druid/content.pdf

###3/4/10 next thing to do	
-EemsController.show
	-assigns @eem @parts[]
	-render Eem detail page
	
	
	
-ContentFileController/:id => #show
	-calls ContentFile.percent_done
	-returns json
	-should return < 0 if there's an error

#Need to grab druids from Suri
Dashboard
	-Blacklight base

#error handling if DownloadJob fails
-retry?


#HOLD Needed for addtional files when Eems is already created
PartsController.create
	-creates child object
	-sets :done to false
	
	
####Blacklight
-clone blacklight into vendor/plugins/blacklight
-follow super_template
-copy blacklight config into app level
-modify routes file
-modify environment.rb
-application helper
-modify application controller